set nocompatible

"{{{ Plugins
call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'drewtempelmeyer/palenight.vim'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'editorconfig/editorconfig-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-commentary'

Plug 'HerringtonDarkholme/yats.vim'
Plug 'cespare/vim-toml'
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
call plug#end()
"}}}

"{{{ Visual
" Turn on syntax highlight
syntax on
" TrueColor terminal
set termguicolors
" Setting background to dark
set background=dark
" Sweet theme
colorscheme palenight
" Don't ever show tabline
set showtabline=0
" Show numbers... relatively
set number relativenumber
" Make line numbers space wider
set numberwidth=6
" Draw line cursor
set cursorline
" Want to see right margin
set colorcolumn=+1
" Don't need mode to be shown
set noshowmode
" Break smart
set linebreak
" Good break marker
let &showbreak='↪ '
" Hide '1 match' and other related messages
set shortmess+=c
" Horizontal split below, vertical - right
set splitbelow splitright
" Don't syntax highlight too long lines
set synmaxcol=300
" Change title of terminal
set title
" Wait to redraw
set lazyredraw
" Don't render links, bolds, italics in HTML
let html_no_rendering=1
" Show additional characters
set list listchars=tab:‣\ ,trail:·,precedes:«,extends:»,eol:¬
"}}}

"{{{ Search
" Highlight search matches
set hlsearch
" Incremental search
set incsearch
" Ignore case, but be smart
set ignorecase smartcase
" Live substitute awesomeness
set inccommand=nosplit
set grepprg=rg\ --vimgrep
"}}}

"{{{ Editor
" Write file if jump goes out of this file
set autowrite
" Use system clipboard
set clipboard=unnamedplus
" Allow me to switch to another buffers without saving
set hidden
" Treat tab as 4 spaces during editing
set softtabstop=4
" Spaces for shifting/indenting
set shiftwidth=4
" We need spaces, not tabs
set expandtab
" Backspace behavior I used to
set backspace=2

set showmatch
" I don't like swapfiles
set noswapfile
set timeoutlen=500
set ttimeoutlen=0
" Completion window max size
set pumheight=10
set textwidth=80
" Round indent
set shiftround
" Don't insert comment leader when hitting 'o'
set formatoptions-=o
" Enable virtual edit mode in block selection
set virtualedit=block

" set completeopt-=preview
set completeopt+=noselect
set completeopt+=noinsert
set completeopt+=menuone

augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:⌴
    au InsertLeave * :set listchars+=trail:⌴
augroup END
"}}}

"{{{ UNGROUPED
let loaded_matchparen=1
if !has('nvim')
    set ttyfast
endif
" Scroll 8 lines at a time at bottom/top
set scrolljump=8
" Don't reach borders when dummy-scrolling
set scrolloff=3
set mouse=a
set wildmenu
set wildmode=longest,full
set wildignorecase
" ignores node_modules
set wildignore+=**/node_modules
" ignores bower_components
set wildignore+=**/bower_components
"}}}

"{{{ Bindings
let mapleader=" "

nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)

" Vimrc editing simplification
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" No Ex mode
nnoremap Q <Nop>
command! -nargs=0 -bang Qa qall!
command! -nargs=0 -bang QA qall!

" Moving through visual line by default
noremap j gj
noremap k gk
noremap gj j
noremap gk k

nnoremap Y y$

" Easier jump to begin/end of line
noremap H ^
noremap L $
vnoremap L g_
vnoremap $ g_

" Select the line
nnoremap vv ^vg_

vmap <silent> > >gv
vmap <silent> < <gv

" I want each newline to create undo point
inoremap <return> <C-g>u<cr>

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

nnoremap n nzzzv
nnoremap N Nzzzv

nnoremap <silent> <leader>d :bp\|bd#<cr>
nnoremap <silent> <leader>w :write<cr>
nnoremap <silent> <leader>ww :write!<cr>
nnoremap <silent> <leader>q :q<cr>
nnoremap <silent> <leader>n :enew<cr>

nnoremap <silent> <esc><esc> :nohls<cr>

map <silent> <C-p> :FZF<CR>
nmap <leader>b :make!<cr>

" Zooming into specific split.
map <silent> zi :tabedit +<C-r>=line(".")<cr> %<cr>zz
map <silent> Zi :only<cr>
map <silent> zo :call ZoomOut()<cr>
function! ZoomOut()
    let linenr = line(".")
    exec 'tabclose'
    exec 'normal ' . linenr . 'G'
endfunction

" Operator-pending bindings
onoremap p i(

" https://github.com/stoeffel/.dotfiles/blob/master/vim/visual-at.vim
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction
"}}}

"{{{ [Vim] configuration
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker formatoptions-=o
augroup END
"}}}

"{{{ [Vifm] configuration
augroup filetype_vifm
    autocmd!
    autocmd BufRead,BufNewFile vifmrc set filetype=vim
augroup END
"}}}

"{{{ Karabiner
augroup filetype_karabiner_edn
    autocmd!
    autocmd BufRead,BufNewFile karabiner.edn set makeprg=goku
augroup END
"}}}

"{{{ [Yaml] configuration
augroup filetype_yaml
    autocmd!
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2
augroup END
"}}}

"{{{ CScope
function! Cwindow_no_focus()
    " Store the original window number
    let l:winnr = winnr()

    exec 'cwindow'

    " If focus changed, jump to the last window
    if l:winnr !=# winnr()
        wincmd p
    endif
endfunction

function! CScope_find(cmd, what)
    exec 'normal mR'
    exec 'cs find ' . a:cmd . ' ' . expand(a:what)
    call Cwindow_no_focus()
endfunction
set cscopequickfix=s-,c-,d-,i-,t-,e-,a-,g-

" All next keymaps set R mark so you are able to return back
" Find assignments to this symbol
nmap <silent> <C-g>a :call CScope_find('a', '<cword>')<cr>
"Find this C symbol
nmap <silent> <C-g>s :call CScope_find('s', '<cword>')<cr>
"Find this definition
nmap <silent> <C-g>g :call CScope_find('g', '<cword>')<cr>
"Find functions calling this function
nmap <silent> <C-g>c :call CScope_find('c', '<cword>')<cr>
"Find this text string
nmap <silent> <C-g>t :call CScope_find('t', '<cword>')<cr>
"Find this egrep pattern
nmap <silent> <C-g>e :call CScope_find('e', '<cword>')<cr>
"Find this file
nmap <silent> <C-g>f :call CScope_find('f', '<cfile>')<cr>
"Find files #including this file
nmap <silent> <C-g>i :call CScope_find('i', '^<cfile>$')<cr>
"Find functions called by this function
nmap <silent> <C-g>d :call CScope_find('d', '<cword>')<cr>

nmap <silent> <C-g>q :cexpr []<cr>:cclose<cr>

command! Cqf cexpr []

if has("cscope")
    set cscopetag
    set cscopeprg='gtags-cscope'
    " Search for GTAGS upwards until it's found
    let db = findfile("GTAGS", ".;")
    " add any database in current directory
    if filereadable(db) && !executable(db) && !cscope_connection(0, db)
        exec "cs add " . db
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
endif

" }}}

"{{{ FZF
let $FZF_DEFAULT_COMMAND = 'fd --type f'
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
"}}}

"{{{ Vim Help
augroup vim_help
    autocmd!

    " Open help always to the right.
    autocmd FileType help
                \ wincmd L |
                \ 80 wincmd |
augroup END
"}}}

"{{{ JXA
augroup filetype_scpt
    autocmd!

    autocmd BufRead,BufNewFile,BufReadPost *.scpt
                \ set filetype=javascript |
                \ setlocal makeprg=osascript\ -l\ JavaScript\ %
augroup END
"}}}

"{{{LightLine
" let g:lightline = {
"     \ 'colorscheme': 'palenight'
"     \ }
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }
"}}}
