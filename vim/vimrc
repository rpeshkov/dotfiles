set nocompatible

"
" Plugins
"
call plug#begin('~/.vim/plugged')
Plug 'RRethy/vim-illuminate'
Plug 'christoomey/vim-tmux-navigator'
Plug 'itchyny/lightline.vim'
Plug 'joshdick/onedark.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'romainl/vim-cool'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'nvim-treesitter/nvim-treesitter'
Plug 'junegunn/goyo.vim'
Plug 'voldikss/vim-floaterm'
Plug 'nvim-lua/completion-nvim'
Plug 'mattn/emmet-vim'
Plug 'dense-analysis/ale'
Plug 'neovim/nvim-lspconfig'
Plug 'z0mbix/vim-shfmt', { 'for': 'sh' }
Plug 'tversteeg/registers.nvim'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'ferrine/md-img-paste.vim'
call plug#end()
packadd cfilter

nnoremap <C-n> :NvimTreeToggle<CR>
nnoremap <leader>r :NvimTreeRefresh<CR>
nnoremap <leader>n :NvimTreeFindFile<CR>
let g:nvim_tree_show_icons = {
    \ 'git': 1,
    \ 'folders': 0,
    \ 'files': 0,
    \ }

nmap gx :silent execute "!open " . shellescape("<cWORD>")<CR>

autocmd FileType markdown nmap <buffer><silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>

let g:mdip_imgdir = 'i'
"
" Visual
"
syntax on
colorscheme onedark
hi illuminatedWord ctermbg=238 guibg=#555555
set termguicolors

filetype plugin indent on
filetype plugin on

let g:ale_linters_explicit = 1
let g:ale_fix_on_save = 1
let g:ale_fixers = {
            \   'html': ['prettier'],
            \   'javascript': ['prettier'],
            \   'css': ['prettier'],
            \}
let g:ale_linters = {
            \   'sh': ['shellcheck']
            \}


set number norelativenumber
set cursorline
set synmaxcol=512
set title
set lazyredraw
set listchars=tab:‣\ ,trail:·,precedes:«,extends:»,eol:¬
set signcolumn=no

set linebreak
let &showbreak='  ↪ '
set cpoptions+=n
set shortmess+=c
set splitbelow splitright
set noshowmode

"
" Search
"
set hlsearch
set incsearch
set ignorecase
set smartcase
set inccommand=nosplit
set grepprg=rg\ --vimgrep
set grepformat=%f:%l:%c:%m,%f:%l:%m

"
" Editor
"
set autowrite
set clipboard=unnamedplus
set hidden
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set noswapfile
set notimeout
set ttimeout
set ttimeoutlen=10
set pumheight=10
set virtualedit=block
set completeopt+=noselect,noinsert,menuone

augroup hlsearch
    autocmd!
    autocmd InsertEnter * :setlocal nohlsearch
    autocmd InsertLeave * :setlocal hlsearch
augroup END

"
" UNGROUPED
"
let loaded_matchparen=1
set scrolloff=5
set mouse=a
set wildmenu
set wildmode=longest:full,full
set wildignore+=**/node_modules

"
" Bindings
"
let mapleader=" "
imap <silent> <c-p> <Plug>(completion_trigger)
" Completion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Vimrc editing simplification
nnoremap <silent> <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <silent> <leader>sv :source $MYVIMRC<cr>

nnoremap <silent> <leader>w :clo<cr>
nnoremap <silent> <leader>d :bd<cr>

" No Ex mode
nnoremap Q <Nop>

" Moving through visual line by default
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Yank till end of line
nnoremap Y y$

" Easier jump to begin/end of line
noremap H ^
noremap L $
vnoremap L g_
vnoremap $ g_

" Select the line
nnoremap vv ^vg_

" Shifting left/right
vmap <silent> > >gv
vmap <silent> < <gv

" I want each newline to create undo point
inoremap <return> <C-g>u<cr>

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Open folds when jumping through matches
nnoremap n nzzzv
nnoremap N Nzzzv

nmap <silent> <leader><space> :Files<CR>
nmap <silent> <leader>f :FloatermNew nnn<CR>
nmap <silent> <leader>/ :BLines<cr>
nmap <silent> <leader>l :Buffers<cr>

" Fix gx
nmap gx :silent execute "!open " . shellescape("<cWORD>")<CR>


" https://github.com/stoeffel/.dotfiles/blob/master/vim/visual-at.vim
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

" [Yaml] configuration
augroup filetype_yaml
    autocmd!
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2
augroup END

" FZF
augroup fzf
    autocmd!
    autocmd  FileType fzf set laststatus=0 noruler
            \| autocmd BufLeave <buffer> set laststatus=2 ruler
augroup END

" Vim Help
function! Help_autocmd()
    if &l:buftype ==# 'help'
        wincmd L
        80 wincmd |
        setlocal signcolumn=no
    endif
endfunction

augroup vim_help
    autocmd!
    autocmd BufWinEnter * call Help_autocmd()
augroup END

" Goyo
" nmap <f12> :Goyo<cr>
let g:goyo_width=120

" nvim-treesitter
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "typescript",     -- one of "all", "language", or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "gnn",
      node_incremental = "grn",
      scope_incremental = "grc",
      node_decremental = "grm",
    },
  },
}
EOF

lua <<EOF
local nvim_lsp = require('lspconfig')
local on_attach = function(client, bufnr)
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end

    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

    local opts = { noremap=true, silent=true }
    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
end

local servers = {"bashls", "tsserver"}
for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup { on_attach = on_attach }
end

EOF

autocmd BufEnter * lua require'completion'.on_attach()

let g:shfmt_fmt_on_save = 1
